name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build-macos:
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      - name: Build with PyInstaller
        run: |
          pyinstaller easyscp.spec --clean

      - name: Create DMG
        run: |
          mkdir -p dist/dmg
          cp -r dist/EasySCP.app dist/dmg/
          ln -s /Applications dist/dmg/Applications
          
          # Create DMG
          hdiutil create -volname "EasySCP" -srcfolder dist/dmg -ov -format UDZO dist/EasySCP-macOS-unsigned.dmg
          rm -rf dist/dmg

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-build
          path: dist/EasySCP-macOS-unsigned.dmg

  build-windows:
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      - name: Build with PyInstaller
        run: |
          pyinstaller easyscp.spec --clean

      - name: Create installer (if NSIS script exists)
        run: |
          if (Test-Path "installer_windows.nsi") {
            choco install nsis -y
            & "C:\Program Files (x86)\NSIS\makensis.exe" installer_windows.nsi
          }

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-build
          path: |
            dist/EasySCP.exe
            dist/EasySCP-Setup.exe

  build-linux:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      - name: Build with PyInstaller
        run: |
          pyinstaller easyscp.spec --clean
          
      - name: Create AppImage
        run: |
          # Download appimagetool
          wget -q https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage
          chmod +x appimagetool-x86_64.AppImage
          
          # Create AppDir structure
          mkdir -p AppDir/usr/bin
          mkdir -p AppDir/usr/share/applications
          mkdir -p AppDir/usr/share/icons/hicolor/256x256/apps
          
          # Copy executable
          cp -r dist/EasySCP AppDir/usr/bin/
          
          # Create desktop file
          cat > AppDir/usr/share/applications/easyscp.desktop << EOF
          [Desktop Entry]
          Type=Application
          Name=EasySCP
          Exec=EasySCP
          Icon=easyscp
          Categories=Network;FileTransfer;
          Comment=SSH File Manager and Terminal
          EOF
          
          # Copy icon if exists
          if [ -f assets/icon.png ]; then
            cp assets/icon.png AppDir/usr/share/icons/hicolor/256x256/apps/easyscp.png
          fi
          
          # Create AppRun
          cat > AppDir/AppRun << 'EOF'
          #!/bin/bash
          HERE="$(dirname "$(readlink -f "${0}")")"
          exec "${HERE}/usr/bin/EasySCP" "$@"
          EOF
          chmod +x AppDir/AppRun
          
          # Build AppImage
          ./appimagetool-x86_64.AppImage AppDir dist/EasySCP-linux-x86_64.AppImage

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-build
          path: dist/EasySCP-linux-x86_64.AppImage

  create-release:
    needs: [build-macos, build-windows, build-linux]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            macos-build/EasySCP-macOS-unsigned.dmg
            windows-build/EasySCP.exe
            windows-build/EasySCP-Setup.exe
            linux-build/EasySCP-linux-x86_64.AppImage
          draft: false
          prerelease: false
          body: |
            **Note for macOS users:** This build is unsigned. You may need to:
            1. Right-click the app and select "Open" instead of double-clicking
            2. Or go to System Preferences > Security & Privacy and click "Open Anyway"
            
            **Note for Windows users:** You may see a SmartScreen warning. Click "More info" and then "Run anyway" to proceed.
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}